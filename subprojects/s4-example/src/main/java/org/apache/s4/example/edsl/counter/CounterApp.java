// NOTE: this is commented until we fix the dependency to the classes generated by the edsl subproject

package org.apache.s4.example.edsl.counter;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.s4.base.Event;
import org.apache.s4.comm.DefaultCommModule;
import org.apache.s4.comm.tools.TaskSetup;
import org.apache.s4.core.DefaultCoreModule;
import org.apache.s4.edsl.BuilderS4DSL;
import org.apache.s4.fixtures.CommTestUtils;
import org.apache.s4.fixtures.CoreTestUtils;
import org.apache.zookeeper.KeeperException;

import com.google.common.io.Resources;
import com.google.inject.Guice;
import com.google.inject.Injector;

/**
 * This is a sample application to test the S4 embedded domain-specific language (EDSL).
 * 
 * <p>
 * Grammar:
 * 
 * <pre>
 *  (pe , type , prop* , (fireOn , afterInterval? , afterNumEvents?)? , (timer, withPeriod)? ,
 *  (cache, size , expires? )? , asSingleton? , (emit, onField?,
 *  (withKey|withKeyFinder)?, to )*  )+ , build
 * </pre>
 * 
 * <p>
 * See the <a href="http://code.google.com/p/diezel">Diezel</a> project for details.
 * 
 */
final public class CounterApp extends BuilderS4DSL {

    public static void main(String[] args) {
        Injector injector;
        try {
            injector = Guice.createInjector(new DefaultCommModule(Resources.getResource("default.s4.comm.properties")
                    .openStream(), "cluster1"),
                    new DefaultCoreModule(Resources.getResource("default.s4.core.properties").openStream()));

            CoreTestUtils.startZookeeperServer();
            TaskSetup taskSetup = new TaskSetup("localhost:" + CommTestUtils.ZK_PORT);
            String clusterName = "cluster1";
            taskSetup.clean("s4");
            taskSetup.setup(clusterName, 1, 10000);

            CounterApp myApp = injector.getInstance(CounterApp.class);

            /* Normally. the container will handle this but this is just a test. */
            myApp.init();
            myApp.start();

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            myApp.close();
        } catch (IOException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (KeeperException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Override
    protected void onInit() {

        pe("Print").type(PrintPE.class).asSingleton().

        pe("User Count").type(CounterPE.class).fireOn(Event.class).afterInterval(100, TimeUnit.MILLISECONDS)
                .emit(CountEvent.class).withKeyFinder(CountKeyFinder.class).to("Print").

                pe("Gender Count").type(CounterPE.class).fireOn(Event.class).afterInterval(100, TimeUnit.MILLISECONDS)
                .emit(CountEvent.class).withKeyFinder(CountKeyFinder.class).to("Print").

                pe("Age Count").type(CounterPE.class).fireOn(Event.class).afterInterval(100, TimeUnit.MILLISECONDS)
                .emit(CountEvent.class).withKeyFinder(CountKeyFinder.class).to("Print").

                pe("Generate User Event").type(GenerateUserEventPE.class).timer().withPeriod(1, TimeUnit.MILLISECONDS)
                .asSingleton().

                emit(UserEvent.class).withKeyFinder(UserIDKeyFinder.class).to("User Count").

                emit(UserEvent.class).withKey("gender").to("Gender Count").

                emit(UserEvent.class).withKeyFinder(AgeKeyFinder.class).to("Age Count").

                build();
    }

    /*
     * Create and send 200 dummy events of type UserEvent.
     * 
     * @see io.s4.App#start()
     */
    @Override
    protected void onStart() {

    }

    @Override
    protected void onClose() {
        System.out.println("Bye.");
    }

}
